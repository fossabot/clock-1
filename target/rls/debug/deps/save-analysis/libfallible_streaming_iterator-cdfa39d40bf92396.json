{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.2","compilation":{"directory":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57],"program":"/Users/j/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","fallible_streaming_iterator","/Users/j/.cargo/registry/src/github.com-1ecc6299db9ec823/fallible-streaming-iterator-0.1.9/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=cdfa39d40bf92396","-C","extra-filename=-cdfa39d40bf92396","--out-dir","/Users/j/Desktop/Code/clock/target/rls/debug/deps","-L","dependency=/Users/j/Desktop/Code/clock/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/j/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":[47,85,115,101,114,115,47,106,47,68,101,115,107,116,111,112,47,67,111,100,101,47,99,108,111,99,107,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,102,97,108,108,105,98,108,101,95,115,116,114,101,97,109,105,110,103,95,105,116,101,114,97,116,111,114,45,99,100,102,97,51,57,100,52,48,98,102,57,50,51,57,54,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"fallible_streaming_iterator","disambiguator":[5489207498896163552,17118810960142406528]},"crate_root":"/Users/j/.cargo/registry/src/github.com-1ecc6299db9ec823/fallible-streaming-iterator-0.1.9/src","external_crates":[{"file_name":"/Users/j/.cargo/registry/src/github.com-1ecc6299db9ec823/fallible-streaming-iterator-0.1.9/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[16744842085366098991,10021575423373849340]}},{"file_name":"/Users/j/.cargo/registry/src/github.com-1ecc6299db9ec823/fallible-streaming-iterator-0.1.9/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[12219308825194572396,1593244597194478439]}},{"file_name":"/Users/j/.cargo/registry/src/github.com-1ecc6299db9ec823/fallible-streaming-iterator-0.1.9/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[7720465312014950334,11982745657479504049]}}],"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":21145,"line_start":1,"line_end":899,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":21145,"line_start":1,"line_end":899,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/j/.cargo/registry/src/github.com-1ecc6299db9ec823/fallible-streaming-iterator-0.1.9/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":60},{"krate":0,"index":66},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":96},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":116},{"krate":0,"index":120},{"krate":0,"index":122},{"krate":0,"index":264},{"krate":0,"index":270},{"krate":0,"index":266},{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":164},{"krate":0,"index":168},{"krate":0,"index":170},{"krate":0,"index":182},{"krate":0,"index":186},{"krate":0,"index":188},{"krate":0,"index":202},{"krate":0,"index":208},{"krate":0,"index":210},{"krate":0,"index":222},{"krate":0,"index":224},{"krate":0,"index":236},{"krate":0,"index":238},{"krate":0,"index":250},{"krate":0,"index":252}],"decl_id":null,"docs":" Fallible, streaming iteration.","sig":null,"attributes":[{"value":"warn(missing_docs)","span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":548,"byte_end":570,"line_start":16,"line_end":16,"column_start":1,"column_end":23}},{"value":"no_std","span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":605,"byte_end":611,"line_start":17,"line_end":17,"column_start":35,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":12},"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":752,"byte_end":777,"line_start":26,"line_end":26,"column_start":11,"column_end":36},"name":"FallibleStreamingIterator","qualname":"::FallibleStreamingIterator","value":"FallibleStreamingIterator","parent":null,"children":[{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":58}],"decl_id":null,"docs":" A fallible, streaming iterator.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":14},"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":827,"byte_end":831,"line_start":28,"line_end":28,"column_start":10,"column_end":14},"name":"Item","qualname":"::FallibleStreamingIterator::Item","value":"type Item: ?Sized;","parent":{"krate":0,"index":12},"children":[],"decl_id":null,"docs":" The type being iterated over.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":16},"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":888,"byte_end":893,"line_start":31,"line_end":31,"column_start":10,"column_end":15},"name":"Error","qualname":"::FallibleStreamingIterator::Error","value":"type Error;","parent":{"krate":0,"index":12},"children":[],"decl_id":null,"docs":" The error type of iteration.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1236,"byte_end":1243,"line_start":40,"line_end":40,"column_start":8,"column_end":15},"name":"advance","qualname":"::FallibleStreamingIterator::advance","value":"fn (&mut self) -> Result<(), Self::Error>","parent":{"krate":0,"index":12},"children":[],"decl_id":null,"docs":" Advances the iterator to the next position.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1426,"byte_end":1429,"line_start":45,"line_end":45,"column_start":8,"column_end":11},"name":"get","qualname":"::FallibleStreamingIterator::get","value":"fn (&self) -> Option<&Self::Item>","parent":{"krate":0,"index":12},"children":[],"decl_id":null,"docs":" Returns the current element.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1627,"byte_end":1631,"line_start":51,"line_end":51,"column_start":8,"column_end":12},"name":"next","qualname":"::FallibleStreamingIterator::next","value":"fn (&mut self) -> Result<Option<&Self::Item>, Self::Error>","parent":{"krate":0,"index":12},"children":[],"decl_id":null,"docs":" Advances the iterator, returning the next element.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1610,"byte_end":1619,"line_start":50,"line_end":50,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1844,"byte_end":1853,"line_start":58,"line_end":58,"column_start":8,"column_end":17},"name":"size_hint","qualname":"::FallibleStreamingIterator::size_hint","value":"fn (&self) -> (usize, Option<usize>)","parent":{"krate":0,"index":12},"children":[],"decl_id":null,"docs":" Returns bounds on the number of remaining elements in the iterator.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1827,"byte_end":1836,"line_start":57,"line_end":57,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2007,"byte_end":2010,"line_start":64,"line_end":64,"column_start":8,"column_end":11},"name":"all","qualname":"::FallibleStreamingIterator::all","value":"fn <F> (&mut self, mut f: F) -> Result<bool, Self::Error>","parent":{"krate":0,"index":12},"children":[],"decl_id":null,"docs":" Determines if all elements of the iterator satisfy a predicate.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1990,"byte_end":1999,"line_start":63,"line_end":63,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2381,"byte_end":2384,"line_start":79,"line_end":79,"column_start":8,"column_end":11},"name":"any","qualname":"::FallibleStreamingIterator::any","value":"fn <F> (&mut self, mut f: F) -> Result<bool, Self::Error>","parent":{"krate":0,"index":12},"children":[],"decl_id":null,"docs":" Determines if any elements of the iterator satisfy a predicate.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2364,"byte_end":2373,"line_start":78,"line_end":78,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2779,"byte_end":2785,"line_start":92,"line_end":92,"column_start":8,"column_end":14},"name":"by_ref","qualname":"::FallibleStreamingIterator::by_ref","value":"fn (&mut self) -> &mut Self","parent":{"krate":0,"index":12},"children":[],"decl_id":null,"docs":" Borrows an iterator, rather than consuming it.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2762,"byte_end":2771,"line_start":91,"line_end":91,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2954,"byte_end":2959,"line_start":101,"line_end":101,"column_start":8,"column_end":13},"name":"count","qualname":"::FallibleStreamingIterator::count","value":"fn (mut self) -> Result<usize, Self::Error>","parent":{"krate":0,"index":12},"children":[],"decl_id":null,"docs":" Returns the number of remaining elements in the iterator.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2937,"byte_end":2946,"line_start":100,"line_end":100,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3254,"byte_end":3260,"line_start":114,"line_end":114,"column_start":8,"column_end":14},"name":"filter","qualname":"::FallibleStreamingIterator::filter","value":"fn <F> (self, f: F) -> Filter<Self, F>","parent":{"krate":0,"index":12},"children":[],"decl_id":null,"docs":" Returns an iterator which filters elements by a predicate.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3237,"byte_end":3246,"line_start":113,"line_end":113,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3512,"byte_end":3516,"line_start":124,"line_end":124,"column_start":8,"column_end":12},"name":"find","qualname":"::FallibleStreamingIterator::find","value":"fn <F> (&mut self, mut f: F) -> Result<Option<&Self::Item>, Self::Error>","parent":{"krate":0,"index":12},"children":[],"decl_id":null,"docs":" Returns the first element of the iterator which satisfies a predicate.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3495,"byte_end":3504,"line_start":123,"line_end":123,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4031,"byte_end":4039,"line_start":145,"line_end":145,"column_start":8,"column_end":16},"name":"for_each","qualname":"::FallibleStreamingIterator::for_each","value":"fn <F> (mut self, mut f: F) -> Result<(), Self::Error>","parent":{"krate":0,"index":12},"children":[],"decl_id":null,"docs":" Calls a closure on each element of an iterator.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4014,"byte_end":4023,"line_start":144,"line_end":144,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4369,"byte_end":4373,"line_start":158,"line_end":158,"column_start":8,"column_end":12},"name":"fuse","qualname":"::FallibleStreamingIterator::fuse","value":"fn (self) -> Fuse<Self>","parent":{"krate":0,"index":12},"children":[],"decl_id":null,"docs":" Returns an iterator which is well-behaved at the beginning and end of iteration.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4352,"byte_end":4361,"line_start":157,"line_end":157,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4610,"byte_end":4613,"line_start":170,"line_end":170,"column_start":8,"column_end":11},"name":"map","qualname":"::FallibleStreamingIterator::map","value":"fn <F, B> (self, f: F) -> Map<Self, F, B>","parent":{"krate":0,"index":12},"children":[],"decl_id":null,"docs":" Returns an iterator which applies a transform to elements.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4593,"byte_end":4602,"line_start":169,"line_end":169,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5031,"byte_end":5038,"line_start":187,"line_end":187,"column_start":8,"column_end":15},"name":"map_ref","qualname":"::FallibleStreamingIterator::map_ref","value":"fn <F, B> (self, f: F) -> MapRef<Self, F>","parent":{"krate":0,"index":12},"children":[],"decl_id":null,"docs":" Returns an iterator which applies a transform to elements.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5014,"byte_end":5023,"line_start":186,"line_end":186,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5281,"byte_end":5288,"line_start":197,"line_end":197,"column_start":8,"column_end":15},"name":"map_err","qualname":"::FallibleStreamingIterator::map_err","value":"fn <F, B> (self, f: F) -> MapErr<Self, F>","parent":{"krate":0,"index":12},"children":[],"decl_id":null,"docs":" Returns an iterator that applies a transform to errors.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5264,"byte_end":5273,"line_start":196,"line_end":196,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5509,"byte_end":5512,"line_start":207,"line_end":207,"column_start":8,"column_end":11},"name":"nth","qualname":"::FallibleStreamingIterator::nth","value":"fn (&mut self, n: usize) -> Result<Option<&Self::Item>, Self::Error>","parent":{"krate":0,"index":12},"children":[],"decl_id":null,"docs":" Returns the `nth` element of the iterator.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5492,"byte_end":5501,"line_start":206,"line_end":206,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5849,"byte_end":5857,"line_start":219,"line_end":219,"column_start":8,"column_end":16},"name":"position","qualname":"::FallibleStreamingIterator::position","value":"fn <F> (&mut self, mut f: F) -> Result<Option<usize>, Self::Error>","parent":{"krate":0,"index":12},"children":[],"decl_id":null,"docs":" Returns the position of the first element matching a predicate.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5832,"byte_end":5841,"line_start":218,"line_end":218,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6279,"byte_end":6283,"line_start":236,"line_end":236,"column_start":8,"column_end":12},"name":"skip","qualname":"::FallibleStreamingIterator::skip","value":"fn (self, n: usize) -> Skip<Self>","parent":{"krate":0,"index":12},"children":[],"decl_id":null,"docs":" Returns an iterator which skips the first `n` elements.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6262,"byte_end":6271,"line_start":235,"line_end":235,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6504,"byte_end":6514,"line_start":245,"line_end":245,"column_start":8,"column_end":18},"name":"skip_while","qualname":"::FallibleStreamingIterator::skip_while","value":"fn <F> (self, f: F) -> SkipWhile<Self, F>","parent":{"krate":0,"index":12},"children":[],"decl_id":null,"docs":" Returns an iterator which skips the first sequence of elements matching a predicate.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6487,"byte_end":6496,"line_start":244,"line_end":244,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6822,"byte_end":6826,"line_start":259,"line_end":259,"column_start":8,"column_end":12},"name":"take","qualname":"::FallibleStreamingIterator::take","value":"fn (self, n: usize) -> Take<Self>","parent":{"krate":0,"index":12},"children":[],"decl_id":null,"docs":" Returns an iterator which only returns the first `n` elements.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6805,"byte_end":6814,"line_start":258,"line_end":258,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7112,"byte_end":7122,"line_start":272,"line_end":272,"column_start":8,"column_end":18},"name":"take_while","qualname":"::FallibleStreamingIterator::take_while","value":"fn <F> (self, f: F) -> TakeWhile<Self, F>","parent":{"krate":0,"index":12},"children":[],"decl_id":null,"docs":" Returns an iterator which only returns the first sequence of elements matching a predicate.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7095,"byte_end":7104,"line_start":271,"line_end":271,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":60},"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7424,"byte_end":7460,"line_start":286,"line_end":286,"column_start":11,"column_end":47},"name":"DoubleEndedFallibleStreamingIterator","qualname":"::DoubleEndedFallibleStreamingIterator","value":"DoubleEndedFallibleStreamingIterator: FallibleStreamingIterator","parent":null,"children":[{"krate":0,"index":62},{"krate":0,"index":64}],"decl_id":null,"docs":" A fallible, streaming iterator which can be advanced from either end.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7863,"byte_end":7875,"line_start":294,"line_end":294,"column_start":8,"column_end":20},"name":"advance_back","qualname":"::DoubleEndedFallibleStreamingIterator::advance_back","value":"fn (&mut self) -> Result<(), Self::Error>","parent":{"krate":0,"index":60},"children":[],"decl_id":null,"docs":" Advances the state of the iterator to the next item from the end.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8098,"byte_end":8107,"line_start":300,"line_end":300,"column_start":8,"column_end":17},"name":"next_back","qualname":"::DoubleEndedFallibleStreamingIterator::next_back","value":"fn (&mut self) -> Result<Option<&Self::Item>, Self::Error>","parent":{"krate":0,"index":60},"children":[],"decl_id":null,"docs":" Advances the back of the iterator, returning the last element.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8081,"byte_end":8090,"line_start":299,"line_end":299,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":80},"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9458,"byte_end":9465,"line_start":365,"line_end":365,"column_start":8,"column_end":15},"name":"convert","qualname":"::convert","value":"fn <'a, I, T, E> (it: I) -> Convert<'a, I, T>","parent":null,"children":[],"decl_id":null,"docs":" Converts a normal `Iterator` over `Results` of references into a\n `FallibleStreamingIterator`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":82},"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9655,"byte_end":9662,"line_start":373,"line_end":373,"column_start":12,"column_end":19},"name":"Convert","qualname":"::Convert","value":"Convert {  }","parent":null,"children":[{"krate":0,"index":69},{"krate":0,"index":71}],"decl_id":null,"docs":" An iterator which wraps a normal `Iterator`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":100},"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10726,"byte_end":10731,"line_start":422,"line_end":422,"column_start":8,"column_end":13},"name":"empty","qualname":"::empty","value":"fn <T, E> () -> Empty<T, E>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over no items.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":102},"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10825,"byte_end":10830,"line_start":427,"line_end":427,"column_start":12,"column_end":17},"name":"Empty","qualname":"::Empty","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over no items.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":120},"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11422,"byte_end":11428,"line_start":457,"line_end":457,"column_start":12,"column_end":18},"name":"Filter","qualname":"::Filter","value":"Filter {  }","parent":null,"children":[{"krate":0,"index":113},{"krate":0,"index":115}],"decl_id":null,"docs":" An iterator which filters elements with a predicate.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":134},"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12208,"byte_end":12212,"line_start":499,"line_end":499,"column_start":12,"column_end":16},"name":"Fuse","qualname":"::Fuse","value":"Fuse {  }","parent":null,"children":[{"krate":0,"index":123},{"krate":0,"index":125}],"decl_id":null,"docs":" An iterator which is well-behaved at the beginning and end of iteration.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":150},"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14572,"byte_end":14575,"line_start":584,"line_end":584,"column_start":12,"column_end":15},"name":"Map","qualname":"::Map","value":"Map {  }","parent":null,"children":[{"krate":0,"index":135},{"krate":0,"index":137},{"krate":0,"index":139}],"decl_id":null,"docs":" An iterator which applies a transform to elements.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":168},"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15508,"byte_end":15514,"line_start":628,"line_end":628,"column_start":12,"column_end":18},"name":"MapRef","qualname":"::MapRef","value":"MapRef {  }","parent":null,"children":[{"krate":0,"index":157},{"krate":0,"index":159}],"decl_id":null,"docs":" An iterator which applies a transform to elements.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":186},"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16351,"byte_end":16357,"line_start":669,"line_end":669,"column_start":12,"column_end":18},"name":"MapErr","qualname":"::MapErr","value":"MapErr {  }","parent":null,"children":[{"krate":0,"index":177},{"krate":0,"index":179}],"decl_id":null,"docs":" An iterator which applies a transform to errors.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":208},"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17453,"byte_end":17457,"line_start":720,"line_end":720,"column_start":12,"column_end":16},"name":"Skip","qualname":"::Skip","value":"Skip {  }","parent":null,"children":[{"krate":0,"index":195},{"krate":0,"index":197}],"decl_id":null,"docs":" An iterator which skips a number of initial elements.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":222},"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18269,"byte_end":18278,"line_start":759,"line_end":759,"column_start":12,"column_end":21},"name":"SkipWhile","qualname":"::SkipWhile","value":"SkipWhile {  }","parent":null,"children":[{"krate":0,"index":207},{"krate":0,"index":209},{"krate":0,"index":211}],"decl_id":null,"docs":" An iterator which skips initial elements matching a predicate.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":236},"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19141,"byte_end":19145,"line_start":801,"line_end":801,"column_start":12,"column_end":16},"name":"Take","qualname":"::Take","value":"Take {  }","parent":null,"children":[{"krate":0,"index":223},{"krate":0,"index":225},{"krate":0,"index":227}],"decl_id":null,"docs":" An iterator which only returns a number of initial elements.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":250},"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20119,"byte_end":20128,"line_start":850,"line_end":850,"column_start":12,"column_end":21},"name":"TakeWhile","qualname":"::TakeWhile","value":"TakeWhile {  }","parent":null,"children":[{"krate":0,"index":235},{"krate":0,"index":237},{"krate":0,"index":239}],"decl_id":null,"docs":" An iterator which only returns initial elements matching a predicate.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9766,"byte_end":9773,"line_start":378,"line_end":378,"column_start":49,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10349,"byte_end":10356,"line_start":406,"line_end":406,"column_start":60,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10901,"byte_end":10906,"line_start":429,"line_end":429,"column_start":42,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":114}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11252,"byte_end":11257,"line_start":449,"line_end":449,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":118}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11502,"byte_end":11508,"line_start":462,"line_end":462,"column_start":42,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":124},{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":130},{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12292,"byte_end":12296,"line_start":504,"line_end":504,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":144},{"krate":0,"index":146},{"krate":0,"index":148}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14677,"byte_end":14680,"line_start":590,"line_end":590,"column_start":45,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":160},{"krate":0,"index":162}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15192,"byte_end":15195,"line_start":615,"line_end":615,"column_start":56,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15599,"byte_end":15605,"line_start":633,"line_end":633,"column_start":53,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":178},{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16083,"byte_end":16089,"line_start":657,"line_end":657,"column_start":64,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16434,"byte_end":16440,"line_start":674,"line_end":674,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":190},{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17036,"byte_end":17042,"line_start":703,"line_end":703,"column_start":56,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":204},{"krate":0,"index":206}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17529,"byte_end":17533,"line_start":725,"line_end":725,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":212},{"krate":0,"index":214},{"krate":0,"index":216},{"krate":0,"index":218},{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18368,"byte_end":18377,"line_start":765,"line_end":765,"column_start":42,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":226},{"krate":0,"index":228},{"krate":0,"index":230},{"krate":0,"index":232},{"krate":0,"index":234}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19233,"byte_end":19237,"line_start":807,"line_end":807,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":240},{"krate":0,"index":242},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":248}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20218,"byte_end":20227,"line_start":856,"line_end":856,"column_start":42,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":254},{"krate":0,"index":256},{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":262}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7462,"byte_end":7487,"line_start":286,"line_end":286,"column_start":49,"column_end":74},"kind":"SuperTrait","from":{"krate":0,"index":12},"to":{"krate":0,"index":60}},{"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9766,"byte_end":9773,"line_start":378,"line_end":378,"column_start":49,"column_end":56},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":82},"to":{"krate":0,"index":12}},{"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10349,"byte_end":10356,"line_start":406,"line_end":406,"column_start":60,"column_end":67},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":82},"to":{"krate":0,"index":60}},{"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10901,"byte_end":10906,"line_start":429,"line_end":429,"column_start":42,"column_end":47},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":102},"to":{"krate":0,"index":12}},{"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11252,"byte_end":11257,"line_start":449,"line_end":449,"column_start":53,"column_end":58},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":102},"to":{"krate":0,"index":60}},{"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11502,"byte_end":11508,"line_start":462,"line_end":462,"column_start":42,"column_end":48},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":120},"to":{"krate":0,"index":12}},{"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12292,"byte_end":12296,"line_start":504,"line_end":504,"column_start":39,"column_end":43},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":134},"to":{"krate":0,"index":12}},{"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14677,"byte_end":14680,"line_start":590,"line_end":590,"column_start":45,"column_end":48},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":150},"to":{"krate":0,"index":12}},{"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15192,"byte_end":15195,"line_start":615,"line_end":615,"column_start":56,"column_end":59},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":150},"to":{"krate":0,"index":60}},{"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15599,"byte_end":15605,"line_start":633,"line_end":633,"column_start":53,"column_end":59},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":168},"to":{"krate":0,"index":12}},{"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16083,"byte_end":16089,"line_start":657,"line_end":657,"column_start":64,"column_end":70},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":168},"to":{"krate":0,"index":60}},{"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16434,"byte_end":16440,"line_start":674,"line_end":674,"column_start":45,"column_end":51},"kind":{"variant":"Impl","fields":[10]},"from":{"krate":0,"index":186},"to":{"krate":0,"index":12}},{"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17036,"byte_end":17042,"line_start":703,"line_end":703,"column_start":56,"column_end":62},"kind":{"variant":"Impl","fields":[11]},"from":{"krate":0,"index":186},"to":{"krate":0,"index":60}},{"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17529,"byte_end":17533,"line_start":725,"line_end":725,"column_start":39,"column_end":43},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":0,"index":208},"to":{"krate":0,"index":12}},{"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18368,"byte_end":18377,"line_start":765,"line_end":765,"column_start":42,"column_end":51},"kind":{"variant":"Impl","fields":[13]},"from":{"krate":0,"index":222},"to":{"krate":0,"index":12}},{"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19233,"byte_end":19237,"line_start":807,"line_end":807,"column_start":39,"column_end":43},"kind":{"variant":"Impl","fields":[14]},"from":{"krate":0,"index":236},"to":{"krate":0,"index":12}},{"span":{"file_name":[47,85,115,101,114,115,47,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,97,108,108,105,98,108,101,45,115,116,114,101,97,109,105,110,103,45,105,116,101,114,97,116,111,114,45,48,46,49,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20218,"byte_end":20227,"line_start":856,"line_end":856,"column_start":42,"column_end":51},"kind":{"variant":"Impl","fields":[15]},"from":{"krate":0,"index":250},"to":{"krate":0,"index":12}}]}